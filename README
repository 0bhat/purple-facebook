Purple Facebook implements the Facebook Messenger protocol into pidgin,
finch, and libpurple. While the primary implementation is for purple3,
this plugin is back-ported for purple2.

This is a replacement to the built-in "Facebook (XMPP)" protocol, which
[has been deprecated](https://developers.facebook.com/docs/chat).

## Basic usage

1. Install the plugin (see the corresponding section below)
2. Restart pidgin
3. Add a new account or modify your existing one with the following details:

    * Protocol: "Facebook" (**NOT** "Facebook (XMPP)")
    * Username: Either your email, facebook username or phone will work. If you
      had "username@chat.facebook.com", remove the "@chat.facebook.com" part.

## Installing on windows

1. Download: [libjson-glib-1.0.dll][dl1]
2. Copy the downloaded `libjson-glib-1.0.dll` to `C:\Program Files\Pidgin`
3. Download the latest `libfacebook.dll` from the [releases][dl2]
4. Copy the downloaded `libfacebook.dll` to `C:\Program Files\Pidgin\plugins`

Note: `Program Files` will be `Program Files (x86)` on 64-bit Windows.

[dl1]: https://github.com/jgeboski/purple-facebook/releases/download/downloads/libjson-glib-1.0.dll
[dl2]: https://github.com/jgeboski/purple-facebook/releases

## Building and Installing on linux and other platforms

Make sure glib, json-glib, libpurple (pidgin), and zlib are installed
with their headers and development information. If these packages came
from the distribution's repository, they will likely need additional
development packages, usually suffixed with -dev.

If the [release tarballs][dl2] are used:

    $ tar xvf purple-facebook-*.tar.gz
    $ cd purple-facebook-*
    $ ./configure
    $ make

Otherwise, to build from this git repository, which additionally requires
autoconf, automake and mercurial (for `update.sh`)

    $ git clone https://github.com/jgeboski/purple-facebook.git
    $ cd purple-facebook
    $ ./autogen.sh
    $ make

With a "global" (or system) installation (usually to /usr/lib/purple-2/) as root:

    # make install

Or with a "local" installation:

    $ mkdir -p ~/.purple/plugins
    $ cp pidgin/libpurple/protocols/facebook/.libs/libfacebook.so ~/.purple/plugins

## Building and Installing on Windows

Note that this section is only relevant for development purposes. See
"installing on windows" above to use the prebuilt dll.

These instructions are simply a continuation of the ones provided by
pidgin. Start by setting up a built pidgin source tree in
`$PIDGIN_DEV_ROOT/win32-dev/pidgin-2.10.11`.

See: https://developer.pidgin.im/wiki/BuildingWinPidgin

### Building on Windows

Download and extract glib:
- Download: [glib-dev_2.28.8-1_win32.zip](http://ftp.gnome.org/pub/gnome/binaries/win32/glib/2.28/glib-dev_2.28.8-1_win32.zip)
- Download: [gettext-runtime-dev_0.18.1.1-2_win32.zip](http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/gettext-runtime-dev_0.18.1.1-2_win32.zip)
- Download: [zlib-dev_1.2.5-2_win32.zip](http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/zlib-dev_1.2.5-2_win32.zip)
- Extract all zips to `$PIDGIN_DEV_ROOT/win32-dev/glib-2.28.8`

Download and extract json-glib:
- Download: [json-glib-0.14.tar.gz](https://github.com/jgeboski/purple-facebook/releases/download/downloads/json-glib-0.14.tar.gz)
- Extract to `$PIDGIN_DEV_ROOT/win32-dev/json-glib-0.14`

Compile the plugin:

    $ cd $PIDGIN_DEV_ROOT/purple-facebook #-<version>
    $ ./update  # not required for dist tarballs
    $ make -f Makefile.mingw install
    $ cp win32-install-dir/plugins/libfacebook.dll C:/Program Files/Pidgin/plugins  # alternatively: Program Files (x86)

## Debugging

Before debugging can begin, the plugin must be compiled with debugging
support. Once debugging support has been enabled, one of the two
supported environment variables can be defined to enable debugging
output. This can be used in unison with debuggers such as GDB, which
should enable easier tracing of bugs.

When posting to the issue tracker, please ensure any sensitive
information has been stripped.

Enable debugging support (enabled by default with Windows):

    $ ./autogen.sh --enable-debug

Enable debugging output:

    $ export PURPLE_UNSAFE_DEBUG=1 PURPLE_VERBOSE_DEBUG=1
    $ pidgin --debug
    OR
    $ PURPLE_UNSAFE_DEBUG=1 PURPLE_VERBOSE_DEBUG=1 pidgin --debug

Obtaining a GDB backtrace:

    $ PURPLE_UNSAFE_DEBUG=1 PURPLE_VERBOSE_DEBUG=1 gdb \
        -ex 'handle SIGPIPE nostop noprint pass' \
        -ex "set breakpoint pending on" \
        -ex "set pagination off" \
        -ex run -ex bt \
        --args pidgin --debug

## Debugging Logs

Debugging logs can often be very useful for determining the root cause
of an issue. Please note, these logs often contain **sensitive** data,
and are likely not ideal for posting in the issue tracker, or anywhere
public for that matter. If a log has has been request from you, it is
preferred you email it directly to the developer, @jgeboski, to prevent
from publicly displaying the log. By emailing a debugging log to the
developer, you understand there is a risk of your sensitive information
potentially being exposed. Before submitting a debugging log, it is
recommended you change you password, or reset your app password.

### Debug Log on *NIX

In a terminal run the following command:

    $ PURPLE_UNSAFE_DEBUG=1 PURPLE_VERBOSE_DEBUG=1 pidgin --debug &> pidgin.log

### Debug Log on Windows

    set PURPLE_UNSAFE_DEBUG=1
    set PURPLE_VERBOSE_DEBUG=1
    cd "C:\Program Files\Pidgin"
    pidgin.exe --debug 2>&1 > "%USERPROFILE%\pidgin.log"
    echo %USERPROFILE%

Note: `Program Files` will be `Program Files (x86)` on 64-bit Windows.

Note: The debug log will reside in `%USERPROFILE%`, which is echoed above.
